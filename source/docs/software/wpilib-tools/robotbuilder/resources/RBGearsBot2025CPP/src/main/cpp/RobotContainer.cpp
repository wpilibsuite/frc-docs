// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

#include "RobotContainer.h"
#include <frc2/command/ParallelRaceGroup.h>
#include <frc/smartdashboard/SmartDashboard.h>



RobotContainer* RobotContainer::m_robotContainer = NULL;

RobotContainer::RobotContainer(){
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
          

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems
    frc::SmartDashboard::PutData(&m_driveTrain);
    frc::SmartDashboard::PutData(&m_claw);
    frc::SmartDashboard::PutData(&m_elevator);
    frc::SmartDashboard::PutData(&m_wrist);


    // SmartDashboard Buttons
    frc::SmartDashboard::PutData("DriveAuto: default", new DriveAuto(10, 0));
    frc::SmartDashboard::PutData("Tank Drive: joystick", new TankDrive([this] {return getJoystick1()->GetY();}, [this] {return getJoystick2()->GetY();}, &m_driveTrain));
    frc::SmartDashboard::PutData("Set Wrist Setpoint: Horizontal", new SetWristSetpoint(0, &m_elevator));
    frc::SmartDashboard::PutData("Set Wrist Setpoint: Raise Wrist", new SetWristSetpoint(-45, &m_elevator));
    frc::SmartDashboard::PutData("Set Elevator Setpoint: down", new SetElevatorSetpoint(1, &m_elevator));
    frc::SmartDashboard::PutData("Set Elevator Setpoint: up", new SetElevatorSetpoint(2, &m_elevator));
    frc::SmartDashboard::PutData("Prepare To Pickup", new PrepareToPickup());
    frc::SmartDashboard::PutData("Place", new Place());
    frc::SmartDashboard::PutData("Pickup", new Pickup());
    frc::SmartDashboard::PutData("Open Claw: default", new OpenClaw(1_s));
    frc::SmartDashboard::PutData("Close Claw", new CloseClaw( &m_claw ));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD

    ConfigureButtonBindings();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT-COMMANDS
m_driveTrain.SetDefaultCommand(TankDrive([this] {return getJoystick1()->GetY();}, [this] {return getJoystick2()->GetY();}, &m_driveTrain));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT-COMMANDS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.SetDefaultOption("Autonomous", new Autonomous());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    frc::SmartDashboard::PutData("Auto Mode", &m_chooser);

}

RobotContainer* RobotContainer::GetInstance() {
    if (m_robotContainer == NULL) {
        m_robotContainer = new RobotContainer();
    }
    return(m_robotContainer);
}

void RobotContainer::ConfigureButtonBindings() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS

frc2::JoystickButton m_dpadUp{&m_logitechController, 5};
frc2::JoystickButton m_dpadDown{&m_logitechController, 7};
frc2::JoystickButton m_dpadRight{&m_logitechController, 6};
frc2::JoystickButton m_dpadLeft{&m_logitechController, 8};
frc2::JoystickButton m_l2{&m_logitechController, 9};
frc2::JoystickButton m_r2{&m_logitechController, 10};
frc2::JoystickButton m_l1{&m_logitechController, 11};
frc2::JoystickButton m_r1{&m_logitechController, 12};

m_dpadUp.OnTrue(SetElevatorSetpoint(2, &m_elevator).WithInterruptBehavior(frc2::Command::InterruptionBehavior::kCancelSelf));

m_dpadDown.OnTrue(SetElevatorSetpoint(2, &m_elevator).WithInterruptBehavior(frc2::Command::InterruptionBehavior::kCancelSelf));

m_dpadRight.OnTrue(CloseClaw( &m_claw ).WithInterruptBehavior(frc2::Command::InterruptionBehavior::kCancelSelf));

m_dpadLeft.OnTrue(OpenClaw(0_s).WithInterruptBehavior(frc2::Command::InterruptionBehavior::kCancelSelf));

m_l2.OnTrue(PrepareToPickup().WithInterruptBehavior(frc2::Command::InterruptionBehavior::kCancelSelf));

m_r2.OnTrue(Pickup().WithInterruptBehavior(frc2::Command::InterruptionBehavior::kCancelSelf));

m_l1.OnTrue(Place().WithInterruptBehavior(frc2::Command::InterruptionBehavior::kCancelSelf));

m_r1.OnTrue(SetWristSetpoint(0, &m_elevator).WithInterruptBehavior(frc2::Command::InterruptionBehavior::kCancelSelf));


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

frc::Joystick* RobotContainer::getLogitechController() {
   return &m_logitechController;
}
frc::Joystick* RobotContainer::getJoystick1() {
   return &m_joystick1;
}
frc::Joystick* RobotContainer::getJoystick2() {
   return &m_joystick2;
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS


frc2::Command* RobotContainer::GetAutonomousCommand() {
  // The selected command will be run in autonomous
  return m_chooser.GetSelected();
}
