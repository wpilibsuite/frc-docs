// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final Wrist m_wrist = new Wrist();
    public final Elevator m_elevator = new Elevator();
    public final Claw m_claw = new Claw();
    public final DriveTrain m_driveTrain = new DriveTrain();

// Joysticks
private final Joystick joystick2 = new Joystick(2);
private final Joystick joystick1 = new Joystick(1);
private final Joystick logitechController = new Joystick(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems
    SmartDashboard.putData(m_wrist);
    SmartDashboard.putData(m_elevator);
    SmartDashboard.putData(m_claw);
    SmartDashboard.putData(m_driveTrain);


    // SmartDashboard Buttons
    SmartDashboard.putData("Close Claw", new CloseClaw( m_claw ));
    SmartDashboard.putData("Open Claw: default", new OpenClaw(1));
    SmartDashboard.putData("Pickup", new Pickup());
    SmartDashboard.putData("Place", new Place());
    SmartDashboard.putData("Prepare To Pickup", new PrepareToPickup());
    SmartDashboard.putData("Set Elevator Setpoint: down", new SetElevatorSetpoint(1, m_elevator));
    SmartDashboard.putData("Set Elevator Setpoint: up", new SetElevatorSetpoint(2, m_elevator));
    SmartDashboard.putData("Set Wrist Setpoint: Horizontal", new SetWristSetpoint(0, m_elevator));
    SmartDashboard.putData("Set Wrist Setpoint: Raise Wrist", new SetWristSetpoint(-45, m_elevator));
    SmartDashboard.putData("Tank Drive: joystick", new TankDrive(() -> getJoystick1().getY(), () -> getJoystick2().getY(), m_driveTrain));
    SmartDashboard.putData("DriveAuto: default", new DriveAuto(10, 0));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_driveTrain.setDefaultCommand(new TankDrive(() -> getJoystick1().getY(), () -> getJoystick2().getY(), m_driveTrain));


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Autonomous", new Autonomous());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton r1 = new JoystickButton(logitechController, 12);        
r1.onTrue(new SetWristSetpoint(0, m_elevator).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton l1 = new JoystickButton(logitechController, 11);        
l1.onTrue(new Place().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton r2 = new JoystickButton(logitechController, 10);        
r2.onTrue(new Pickup().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton l2 = new JoystickButton(logitechController, 9);        
l2.onTrue(new PrepareToPickup().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton dpadLeft = new JoystickButton(logitechController, 8);        
dpadLeft.onTrue(new OpenClaw(0).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton dpadRight = new JoystickButton(logitechController, 6);        
dpadRight.onTrue(new CloseClaw( m_claw ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton dpadDown = new JoystickButton(logitechController, 7);        
dpadDown.onTrue(new SetElevatorSetpoint(2, m_elevator).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton dpadUp = new JoystickButton(logitechController, 5);        
dpadUp.onTrue(new SetElevatorSetpoint(2, m_elevator).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getLogitechController() {
        return logitechController;
    }

public Joystick getJoystick1() {
        return joystick1;
    }

public Joystick getJoystick2() {
        return joystick2;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

