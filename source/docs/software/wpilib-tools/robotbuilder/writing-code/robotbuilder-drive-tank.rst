Driving the Robot with Tank Drive and Joysticks
===============================================

A common use case is to have a joystick that should drive some actuators that are part of a subsystem. The problem is that the joystick is created in the RobotContainer class and the motors to be controlled are in the subsystem. The idea is to create a command that, when scheduled, reads input from the joystick and calls a method that is created on the subsystem that drives the motors.

In this example a drive base subsystem is shown that is operated in tank drive using a pair of joysticks.

Create a Drive Train Subsystem
------------------------------

.. image:: images/driving-with-joysticks-subsystem.png

Create a subsystem called Drive Train. Its responsibility will be to handle the driving for the robot base.

.. image:: images/driving-with-joysticks-differential-drive.png

Inside the Drive Train create a Differential Drive object for a two motor drive. There is a left motor and right motor as part of the Differential Drive class.

.. image:: images/driving-with-joysticks-speed-controller-group.png

Since we want to use more then two motors to drive the robot, inside the Differential Drive, create two Motor Controller Groups. These will group multiple motor controllers so they can be used with Differential Drive.

.. image:: images/driving-with-joysticks-speed-controller.png

Finally, create two Motor Controllers in each Motor Controller Group.

Add the Joysticks to the Operator Interface
-------------------------------------------

.. image:: images/driving-with-joysticks-joysticks.png

Add two joysticks to the Operator Interface, one is the left stick and the other is the right stick. The y-axis on the two joysticks are used to drive the robots left and right sides.

.. note:: Be sure to export your program to C++ or Java before continuing to the next step.

Create a Method to Write the Motors on the Subsystem
----------------------------------------------------

.. tabs::

   .. group-tab:: java

      .. code-block:: java
         :emphasize-lines: 52-54

         public class Drivetrain extends SubsystemBase {

             // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
         private PWMVictorSPX left1;
         private PWMVictorSPX left2;
         private SpeedControllerGroup leftMotor;
         private PWMVictorSPX right1;
         private PWMVictorSPX right2;
         private SpeedControllerGroup rightMotor;
         private DifferentialDrive drive;

             // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

             public Drivetrain() {
                 // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
         left1 = new PWMVictorSPX(0);
          addChild("left1",left1);
          left1.setInverted(false);

         left2 = new PWMVictorSPX(1);
          addChild("left2",left2);
          left2.setInverted(false);

         SpeedControllerGroup leftMotor = new SpeedControllerGroup(left1, left2  );
          addChild("Left Motor",leftMotor);


         right1 = new PWMVictorSPX(5);
          addChild("right1",right1);
          right1.setInverted(false);

         right2 = new PWMVictorSPX(6);
          addChild("right2",right2);
          right2.setInverted(false);

         SpeedControllerGroup rightMotor = new SpeedControllerGroup(right1, right2  );
          addChild("Right Motor",rightMotor);


         drive = new DifferentialDrive(leftMotor, left1);
          addChild("Drive",drive);
          drive.setSafetyEnabled(true);
         drive.setExpiration(0.1);
         drive.setMaxOutput(1.0);

             // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
             }

             // Put methods for controlling this subsystem
             // here. Call these from Commands.

             public void drive(double left, double right) {
                 drive.tankDrive(left, right);
             }
         }

   .. group-tab:: C++ (Header)

      .. code-block:: c++
         :emphasize-lines: 20

         class Drivetrain: public frc2::SubsystemBase {
         private:
             // It's desirable that everything possible is private except
             // for methods that implement subsystem capabilities
             // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
         frc::PWMVictorSPX m_left1{0};
         frc::PWMVictorSPX m_left2{1};
         frc::SpeedControllerGroup m_leftMotor{m_left1, m_left2  };
         frc::PWMVictorSPX m_right1{5};
         frc::PWMVictorSPX m_right2{6};
         frc::SpeedControllerGroup m_rightMotor{m_right1, m_right2  };
         frc::DifferentialDrive m_drive{m_leftMotor, m_left1};

             // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
         public:
         Drivetrain();

             void Periodic() override;
             void SimulationPeriodic() override;
             void Drive(double left, double right);

         };

   .. group-tab:: C++ (Source)

      .. code-block:: c++
         :emphasize-lines: 34-36

         Drivetrain::Drivetrain(){
         SetName("Drivetrain");
             // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

          AddChild("left1", &m_left1);
          m_left1.SetInverted(false);

          AddChild("left2", &m_left2);
          m_left2.SetInverted(false);

          AddChild("Left Motor", &m_leftMotor);


          AddChild("right1", &m_right1);
          m_right1.SetInverted(false);

          AddChild("right2", &m_right2);
          m_right2.SetInverted(false);

          AddChild("Right Motor", &m_rightMotor);


          AddChild("Drive", &m_drive);
          m_drive.SetSafetyEnabled(true);
         m_drive.SetExpiration(0.1);
         m_drive.SetMaxOutput(1.0);

             // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
         }

         // Put methods for controlling this subsystem
         // here. Call these from Commands.

         void Drivetrain::Drive(double left, double right) {
             m_drive.TankDrive(left, right);
         }

Create a method that takes the joystick inputs, in this case the the left and right driver joystick. The values are passed to the DifferentialDrive object that in turn does tank steering using the joystick values. Also create a method called stop() that stops the robot from driving, this might come in handy later.

.. note:: Some RobotBuilder output has been removed for this example for clarity

Read Joystick Values and Call the Subsystem Methods
---------------------------------------------------

.. image:: images/driving-with-joysticks-command.png

Create a command, in this case called Tank Drive. Its purpose will be to read the joystick values and send them to the Drive Base subsystem. Notice that this command Requires the Drive Train subsystem. This will cause it to stop running whenever anything else tries to use the Drive Train.

.. note:: Be sure to export your program to C++ or Java before continuing to the next step.

Add the Code to do the Driving
------------------------------

.. tabs::

   .. group-tab:: java

      .. code-block:: java
         :emphasize-lines: 8-9, 37, 43

         public class TankDrive extends CommandBase {

             // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
                 private final Drivetrain m_drivetrain;

             // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

             private Joystick leftJoystick = RobotContainer.getInstance().getJoystick1();
             private Joystick rightJoystick = RobotContainer.getInstance().getJoystick2();

             // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


             public TankDrive(Drivetrain subsystem) {


             // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
                 // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

             // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
                 // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

                 m_drivetrain = subsystem;
                 addRequirements(m_drivetrain);

             // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
             }

             // Called when the command is initially scheduled.
             @Override
             public void initialize() {
             }

             // Called every time the scheduler runs while the command is scheduled.
             @Override
             public void execute() {
                 m_drivetrain.drive(leftJoystick.getY(), rightJoystick.getY());
             }

             // Called once the command ends or is interrupted.
             @Override
             public void end(boolean interrupted) {
                 m_drivetrain.drive(0.0, 0.0);
             }

             // Returns true when the command should end.
             @Override
             public boolean isFinished() {
                 return false;
             }

             @Override
             public boolean runsWhenDisabled() {
                 // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
                 return false;

             // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
             }
         }

Add code to the execute method to do the actual driving. All that is needed is to get the Joystick objects for the left and right drive joysticks and pass them to the Drive Train subsystem. The subsystem just uses them for the tank steering method on its DifferentialDrive object. And we get tank steering.

We also filled in the ``end()`` method so that when this command is interrupted or stopped, the motors will be stopped as a safety precaution.

Make Default Command
--------------------

.. image:: images/driving-with-joysticks-default-command.png

The last step is to make the Tank Drive command be the "Default Command" for the Drive Train subsystem. This means that whenever no other command is using the Drive Train, the Joysticks will be in control. This is probably the desirable behavior. When the autonomous code is running, it will also require the drive train and interrupt the Tank Drive command. When the autonomous code is finished, the DriveWithJoysticks command will restart automatically (because it is the default command), and the operators will be back in control. If you write any code that does teleop automatic driving, those commands should also "require" the DriveTrain so that they too will interrupt the Tank Drive command and have full control.

.. note:: Be sure to export your program to C++ or Java before continuing.
